;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name ofws.core, :imports nil, :requires nil, :uses nil, :defs {app-state {:name ofws.core/app-state, :file "src/ofws/core.cljs", :line 8, :column 1, :end-line 8, :end-column 19, :meta {:file "/Users/openfin/projects/clojure/ofws/src/ofws/core.cljs", :line 8, :column 10, :end-line 8, :end-column 19}}, installer-url-def {:name ofws.core/installer-url-def, :file "src/ofws/core.cljs", :line 10, :column 1, :end-line 10, :end-column 23, :meta {:file "/Users/openfin/projects/clojure/ofws/src/ofws/core.cljs", :line 10, :column 6, :end-line 10, :end-column 23}}, base {:name ofws.core/base, :file "src/ofws/core.cljs", :line 13, :column 1, :end-line 13, :end-column 10, :meta {:file "/Users/openfin/projects/clojure/ofws/src/ofws/core.cljs", :line 13, :column 6, :end-line 13, :end-column 10}}, installer-map {:name ofws.core/installer-map, :file "src/ofws/core.cljs", :line 15, :column 1, :end-line 15, :end-column 19, :meta {:file "/Users/openfin/projects/clojure/ofws/src/ofws/core.cljs", :line 15, :column 6, :end-line 15, :end-column 19}}, update-all {:protocol-inline nil, :meta {:file "/Users/openfin/projects/clojure/ofws/src/ofws/core.cljs", :line 18, :column 7, :end-line 18, :end-column 17, :arglists (quote ([base-map action val-map])), :doc "given 2 maps and an operation perform the updating"}, :name ofws.core/update-all, :variadic false, :file "src/ofws/core.cljs", :end-column 17, :method-params ([base-map action val-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([base-map action val-map])), :doc "given 2 maps and an operation perform the updating"}, combine-as-url {:protocol-inline nil, :meta {:file "/Users/openfin/projects/clojure/ofws/src/ofws/core.cljs", :line 30, :column 7, :end-line 30, :end-column 21, :arglists (quote ([val-map])), :doc "given a map of key -> vec reduce on the vecs and combine\n  with an & to create a url query string"}, :name ofws.core/combine-as-url, :variadic false, :file "src/ofws/core.cljs", :end-column 21, :method-params ([val-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val-map])), :doc "given a map of key -> vec reduce on the vecs and combine\n  with an & to create a url query string"}, butlast-str {:protocol-inline nil, :meta {:file "/Users/openfin/projects/clojure/ofws/src/ofws/core.cljs", :line 44, :column 7, :end-line 44, :end-column 18, :arglists (quote ([the-string])), :doc "return all but the last character in a string"}, :name ofws.core/butlast-str, :variadic false, :file "src/ofws/core.cljs", :end-column 18, :method-params ([the-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([the-string])), :doc "return all but the last character in a string"}, main {:protocol-inline nil, :meta {:file "/Users/openfin/projects/clojure/ofws/src/ofws/core.cljs", :line 50, :column 7, :end-line 50, :end-column 11, :arglists (quote ([])), :doc "entry point and wireup"}, :name ofws.core/main, :variadic false, :file "src/ofws/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "entry point and wireup"}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/openfin/projects/clojure/ofws/src/ofws/core.cljs", :line 74, :column 7, :end-line 74, :end-column 19, :arglists (quote ([]))}, :name ofws.core/on-js-reload, :variadic false, :file "src/ofws/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:config :file-name :text}, :order [:text :file-name :config]}, :doc nil}